{"version":3,"file":"index.js","sources":["../../src/helpers.js","../../src/rows.js","../../src/columns.js","../../src/table.js","../../src/config.js","../../src/datatable.js"],"sourcesContent":["/**\n * Check is item is object\n * @return {Boolean}\n */\nexport const isObject = val => Object.prototype.toString.call(val) === \"[object Object]\"\n\n/**\n * Check for valid JSON string\n * @param  {String}   str\n * @return {Boolean|Array|Object}\n */\nexport const isJson = str => {\n    let t = !1\n    try {\n        t = JSON.parse(str)\n    } catch (e) {\n        return !1\n    }\n    return !(null === t || (!Array.isArray(t) && !isObject(t))) && t\n}\n\n/**\n * Create DOM element node\n * @param  {String}   nodeName nodeName\n * @param  {Object}   attrs properties and attributes\n * @return {Object}\n */\nexport const createElement = (nodeName, attrs) => {\n    const dom = document.createElement(nodeName)\n    if (attrs && \"object\" == typeof attrs) {\n        for (const attr in attrs) {\n            if (\"html\" === attr) {\n                dom.innerHTML = attrs[attr]\n            } else {\n                dom.setAttribute(attr, attrs[attr])\n            }\n        }\n    }\n    return dom\n}\n\nexport const flush = el => {\n    if (el instanceof NodeList) {\n        el.forEach(e => flush(e))\n    } else {\n        el.innerHTML = \"\"\n    }\n}\n\n/**\n * Create button helper\n * @param  {String}   class\n * @param  {Number}   page\n * @param  {String}   text\n * @return {Object}\n */\nexport const button = (className, page, text) => createElement(\n    \"li\",\n    {\n        class: className,\n        html: `<a href=\"#\" data-page=\"${page}\">${text}</a>`\n    }\n)\n\n/**\n * Bubble sort algorithm\n */\nexport const sortItems = (a, b, func) => {\n    let c\n    let d\n    const compare = func || ((x, y) => x > y);\n    if (1 === b) {\n        c = 0\n        d = a.length\n    } else {\n        if (b === -1) {\n            c = a.length - 1\n            d = -1\n        }\n    }\n    for (let e = !0; e;) {\n        e = !1\n        for (let f = c; f != d; f += b) {\n            if (a[f + b] && compare(a[f].value, a[f + b].value) ) {\n                const g = a[f]\n                const h = a[f + b]\n                const i = g\n                a[f] = h\n                a[f + b] = i\n                e = !0\n            }\n        }\n    }\n    return a\n}\n\n/**\n * Pager truncation algorithm\n */\nexport const truncate = (a, b, c, d, ellipsis) => {\n    d = d || 2\n    let j\n    const e = 2 * d\n    let f = b - d\n    let g = b + d\n    const h = []\n    const i = []\n    if (b < 4 - d + e) {\n        g = 3 + e\n    } else if (b > c - (3 - d + e)) {\n        f = c - (2 + e)\n    }\n    for (let k = 1; k <= c; k++) {\n        if (1 == k || k == c || (k >= f && k <= g)) {\n            const l = a[k - 1]\n            l.classList.remove(\"active\")\n            h.push(l)\n        }\n    }\n    h.forEach(c => {\n        const d = c.children[0].getAttribute(\"data-page\")\n        if (j) {\n            const e = j.children[0].getAttribute(\"data-page\")\n            if (d - e == 2) i.push(a[e])\n            else if (d - e != 1) {\n                const f = createElement(\"li\", {\n                    class: \"ellipsis\",\n                    html: `<a href=\"#\">${ellipsis}</a>`\n                })\n                i.push(f)\n            }\n        }\n        i.push(c)\n        j = c\n    })\n\n    return i\n}\n","import {createElement} from \"./helpers\"\n/**\n * Rows API\n * @param {Object} instance DataTable instance\n * @param {Array} rows\n */\nexport class Rows {\n    constructor(dt, rows) {\n        this.dt = dt\n        this.rows = rows\n\n        return this\n    }\n\n    /**\n     * Build a new row\n     * @param  {Array} row\n     * @return {HTMLElement}\n     */\n    build(row) {\n        const tr = createElement(\"tr\")\n\n        let headings = this.dt.headings\n\n        if (!headings.length) {\n            headings = row.map(() => \"\")\n        }\n\n        headings.forEach((h, i) => {\n            const td = createElement(\"td\")\n\n            // Fixes #29\n            if (!row[i] || !row[i].length) {\n                row[i] = \"\"\n            }\n\n            td.innerHTML = row[i]\n\n            td.data = row[i]\n\n            tr.appendChild(td)\n        })\n\n        return tr\n    }\n\n    render(row) {\n        return row\n    }\n\n    /**\n     * Add new row\n     * @param {Array} select\n     */\n    add(data) {\n        if (Array.isArray(data)) {\n            const dt = this.dt\n            // Check for multiple rows\n            if (Array.isArray(data[0])) {\n                data.forEach(row => {\n                    dt.data.push(this.build(row))\n                })\n            } else {\n                dt.data.push(this.build(data))\n            }\n\n            // We may have added data to an empty table\n            if ( dt.data.length ) {\n                dt.hasRows = true\n            }\n\n\n            this.update()\n\n            dt.columns().rebuild()\n        }\n\n    }\n\n    /**\n     * Remove row(s)\n     * @param  {Array|Number} select\n     * @return {Void}\n     */\n    remove(select) {\n        const dt = this.dt\n\n        if (Array.isArray(select)) {\n            // Remove in reverse otherwise the indexes will be incorrect\n            select.sort((a, b) => b - a)\n\n            select.forEach(row => {\n                dt.data.splice(row, 1)\n            })\n        } else if (select == \"all\") {\n            dt.data = [];\n        } else {\n            dt.data.splice(select, 1)\n        }\n\n        // We may have emptied the table\n        if ( !dt.data.length ) {\n            dt.hasRows = false\n        }\n\n        this.update()\n        dt.columns().rebuild()\n    }\n\n    /**\n     * Update row indexes\n     * @return {Void}\n     */\n    update() {\n        this.dt.data.forEach((row, i) => {\n            row.dataIndex = i\n        })\n    }\n\n    /**\n     * Find index of row by searching for a value in a column\n     * @param  {Number} columnIndex\n     * @param  {String} value\n     * @return {Number}\n     */\n    findRowIndex(columnIndex, value) {\n        // returns row index of first case-insensitive string match\n        // inside the td innerText at specific column index\n        return this.dt.data.findIndex(\n            tr => tr.children[columnIndex].innerText.toLowerCase().includes(String(value).toLowerCase())\n        )\n    }\n\n    /**\n     * Find index, row, and column data by searching for a value in a column\n     * @param  {Number} columnIndex\n     * @param  {String} value\n     * @return {Object}\n     */\n    findRow(columnIndex, value) {\n        // get the row index\n        const index = this.findRowIndex(columnIndex, value)\n        // exit if not found\n        if (index < 0) {\n            return {\n                index: -1,\n                row: null,\n                cols: []\n            }\n        }\n        // get the row from data\n        const row = this.dt.data[index]\n        // return innerHTML of each td\n        const cols = [...row.cells].map(r => r.innerHTML)\n        // return everything\n        return {\n            index,\n            row,\n            cols\n        }\n    }\n\n    /**\n     * Update a row with new data\n     * @param  {Number} select\n     * @param  {Array} data\n     * @return {Void}\n     */\n    updateRow(select, data) {\n        const row = this.build(data)\n        this.dt.data.splice(select, 1, row)\n        this.update()\n        this.dt.columns().rebuild()\n    }\n}\n","import {sortItems} from \"./helpers\"\n\n/**\n * Columns API\n * @param {Object} instance DataTable instance\n * @param {Mixed} columns  Column index or array of column indexes\n */\nexport class Columns {\n    constructor(dt) {\n        this.dt = dt\n        return this\n    }\n\n    /**\n     * Swap two columns\n     * @return {Void}\n     */\n    swap(columns) {\n        if (columns.length && columns.length === 2) {\n            const cols = []\n\n            // Get the current column indexes\n            this.dt.headings.forEach((h, i) => {\n                cols.push(i)\n            })\n\n            const x = columns[0]\n            const y = columns[1]\n            const b = cols[y]\n            cols[y] = cols[x]\n            cols[x] = b\n\n            this.order(cols)\n        }\n    }\n\n    /**\n     * Reorder the columns\n     * @return {Array} columns  Array of ordered column indexes\n     */\n    order(columns) {\n        let a\n        let b\n        let c\n        let d\n        let h\n        let s\n        let cell\n\n        const temp = [\n            [],\n            [],\n            [],\n            []\n        ]\n\n        const dt = this.dt\n\n        // Order the headings\n        columns.forEach((column, x) => {\n            h = dt.headings[column]\n            s = h.getAttribute(\"data-sortable\") !== \"false\"\n            a = h.cloneNode(true)\n            a.originalCellIndex = x\n            a.sortable = s\n\n            temp[0].push(a)\n\n            if (!dt.hiddenColumns.includes(column)) {\n                b = h.cloneNode(true)\n                b.originalCellIndex = x\n                b.sortable = s\n\n                temp[1].push(b)\n            }\n        })\n\n        // Order the row cells\n        dt.data.forEach((row, i) => {\n            c = row.cloneNode(false)\n            d = row.cloneNode(false)\n\n            c.dataIndex = d.dataIndex = i\n\n            if (row.searchIndex !== null && row.searchIndex !== undefined) {\n                c.searchIndex = d.searchIndex = row.searchIndex\n            }\n\n            // Append the cell to the fragment in the correct order\n            columns.forEach(column => {\n                cell = row.cells[column].cloneNode(true)\n                cell.data = row.cells[column].data\n                c.appendChild(cell)\n\n                if (!dt.hiddenColumns.includes(column)) {\n                    cell = row.cells[column].cloneNode(true)\n                    cell.data = row.cells[column].data\n                    d.appendChild(cell)\n                }\n            })\n\n            temp[2].push(c)\n            temp[3].push(d)\n        })\n\n        dt.headings = temp[0]\n        dt.activeHeadings = temp[1]\n\n        dt.data = temp[2]\n        dt.activeRows = temp[3]\n\n        // Update\n        dt.update()\n    }\n\n    /**\n     * Hide columns\n     * @return {Void}\n     */\n    hide(columns) {\n        if (columns.length) {\n            const dt = this.dt\n\n            columns.forEach(column => {\n                if (!dt.hiddenColumns.includes(column)) {\n                    dt.hiddenColumns.push(column)\n                }\n            })\n\n            this.rebuild()\n        }\n    }\n\n    /**\n     * Show columns\n     * @return {Void}\n     */\n    show(columns) {\n        if (columns.length) {\n            let index\n            const dt = this.dt\n\n            columns.forEach(column => {\n                index = dt.hiddenColumns.indexOf(column)\n                if (index > -1) {\n                    dt.hiddenColumns.splice(index, 1)\n                }\n            })\n\n            this.rebuild()\n        }\n    }\n\n    /**\n     * Check column(s) visibility\n     * @return {Boolean}\n     */\n    visible(columns) {\n        let cols\n        const dt = this.dt\n\n        columns = columns || dt.headings.map(th => th.originalCellIndex)\n\n        if (!isNaN(columns)) {\n            cols = !dt.hiddenColumns.includes(columns)\n        } else if (Array.isArray(columns)) {\n            cols = []\n            columns.forEach(column => {\n                cols.push(!dt.hiddenColumns.includes(column))\n            })\n        }\n\n        return cols\n    }\n\n    /**\n     * Add a new column\n     * @param {Object} data\n     */\n    add(data) {\n        let td\n        const th = document.createElement(\"th\")\n\n        if (!this.dt.headings.length) {\n            this.dt.insert({\n                headings: [data.heading],\n                data: data.data.map(i => [i])\n            })\n            this.rebuild()\n            return\n        }\n\n        if (!this.dt.hiddenHeader) {\n            if (data.heading.nodeName) {\n                th.appendChild(data.heading)\n            } else {\n                th.innerHTML = data.heading\n            }\n        } else {\n            th.innerHTML = \"\"\n        }\n\n        this.dt.headings.push(th)\n\n        this.dt.data.forEach((row, i) => {\n            if (data.data[i]) {\n                td = document.createElement(\"td\")\n\n                if (data.data[i].nodeName) {\n                    td.appendChild(data.data[i])\n                } else {\n                    td.innerHTML = data.data[i]\n                }\n\n                td.data = td.innerHTML\n\n                if (data.render) {\n                    td.innerHTML = data.render.call(this, td.data, td, row)\n                }\n\n                row.appendChild(td)\n            }\n        })\n\n        if (data.type) {\n            th.setAttribute(\"data-type\", data.type)\n        }\n        if (data.format) {\n            th.setAttribute(\"data-format\", data.format)\n        }\n\n        if (data.hasOwnProperty(\"sortable\")) {\n            th.sortable = data.sortable\n            th.setAttribute(\"data-sortable\", data.sortable === true ? \"true\" : \"false\")\n        }\n\n        this.rebuild()\n\n        this.dt.renderHeader()\n    }\n\n    /**\n     * Remove column(s)\n     * @param  {Array|Number} select\n     * @return {Void}\n     */\n    remove(select) {\n        if (Array.isArray(select)) {\n            // Remove in reverse otherwise the indexes will be incorrect\n            select.sort((a, b) => b - a)\n            select.forEach(column => this.remove(column))\n        } else {\n            this.dt.headings.splice(select, 1)\n\n            this.dt.data.forEach(row => {\n                row.removeChild(row.cells[select])\n            })\n        }\n\n        this.rebuild()\n    }\n\n    /**\n     * Filter by column\n     * @param  {int} column - The column no.\n     * @param  {string} dir - asc or desc\n     * @filter {array} filter - optional parameter with a list of strings\n     * @return {void}\n     */\n    filter(column, dir, init, terms) {\n        const dt = this.dt\n\n        // Creates a internal state that manages filters if there are none\n        if ( !dt.filterState ) {\n            dt.filterState = {\n                originalData: dt.data\n            }\n        }\n\n        // If that column is was not filtered yet, we need to create its state\n        if ( !dt.filterState[column] ) {\n\n            // append a filter that selects all rows, 'resetting' the filter\n            const filters = [...terms, () => true]\n\n            dt.filterState[column] = (\n                function() {\n                    let i = 0;\n                    return () => filters[i++ % (filters.length)]\n                }()\n            )\n        }\n\n        // Apply the filter and rebuild table\n        const rowFilter = dt.filterState[column]() // fetches next filter\n        const filteredRows = Array.from(dt.filterState.originalData).filter(tr => {\n            const cell = tr.cells[column]\n            const content = cell.hasAttribute(\"data-content\") ? cell.getAttribute(\"data-content\") : cell.innerText\n\n            // If the filter is a function, call it, if it is a string, compare it\n            return (typeof rowFilter) === \"function\" ? rowFilter(content) : content === rowFilter;\n        })\n\n        dt.data = filteredRows\n\n        if (!dt.data.length) {\n            dt.clear()\n            dt.hasRows = false\n            dt.setMessage(dt.options.labels.noRows)\n        } else {\n            this.rebuild()\n            dt.update()\n        }\n\n        if (!init) {\n            dt.emit(\"datatable.sort\", column, dir)\n        }\n    }\n\n    /**\n     * Sort by column\n     * @param  {int} column - The column no.\n     * @param  {string} dir - asc or desc\n     * @return {void}\n     */\n    sort(column, dir, init) {\n        const dt = this.dt\n\n        // Check column is present\n        if (dt.hasHeadings && (column < 0 || column > dt.headings.length)) {\n            return false\n        }\n\n        //If there is a filter for this column, apply it instead of sorting\n        const filterTerms = dt.options.filters &&\n              dt.options.filters[dt.headings[column].textContent]\n        if ( filterTerms && filterTerms.length !== 0 ) {\n            this.filter(column, dir, init, filterTerms)\n            return;\n        }\n\n        dt.sorting = true\n\n        if (!init) {\n            dt.emit(\"datatable.sorting\", column, dir)\n        }\n\n        let rows = dt.data\n        const alpha = []\n        const numeric = []\n        let a = 0\n        let n = 0\n        const th = dt.headings[column]\n\n        const waitFor = []\n\n        // Check for date format\n        if (th.getAttribute(\"data-type\") === \"date\") {\n            let format = false\n            const formatted = th.hasAttribute(\"data-format\")\n\n            if (formatted) {\n                format = th.getAttribute(\"data-format\")\n            }\n            waitFor.push(import(\"./date\").then(({parseDate}) => date => parseDate(date, format)))\n        }\n\n        Promise.all(waitFor).then(importedFunctions => {\n            const parseFunction = importedFunctions[0] // only defined if date\n            Array.from(rows).forEach(tr => {\n                const cell = tr.cells[column]\n                const content = cell.hasAttribute(\"data-content\") ? cell.getAttribute(\"data-content\") : cell.innerText\n                let num\n                if (parseFunction) {\n                    num = parseFunction(content)\n                } else if (typeof content===\"string\") {\n                    num = content.replace(/(\\$|,|\\s|%)/g, \"\")\n                } else {\n                    num = content\n                }\n\n                if (parseFloat(num) == num) {\n                    numeric[n++] = {\n                        value: Number(num),\n                        row: tr\n                    }\n                } else {\n                    alpha[a++] = {\n                        value: typeof content===\"string\" ? content.toLowerCase().trim() : content.trim(),\n                        row: tr\n                    }\n                }\n            })\n\n            const sortType = th.dataset.sort;\n            const sortFunction = sortType ? dt[sortType].compare : null;\n            /* Sort according to direction (ascending or descending) */\n            if (!dir) {\n                if (th.classList.contains(\"asc\")) {\n                    dir = \"desc\"\n                } else {\n                    dir = \"asc\"\n                }\n            }\n            let top\n            let btm\n            if (dir == \"desc\") {\n                top = sortItems(alpha, -1, sortFunction)\n                btm = sortItems(numeric, -1, sortFunction)\n                th.classList.remove(\"asc\")\n                th.classList.add(\"desc\")\n            } else {\n                top = sortItems(numeric, 1, sortFunction)\n                btm = sortItems(alpha, 1, sortFunction)\n                th.classList.remove(\"desc\")\n                th.classList.add(\"asc\")\n            }\n\n            /* Clear asc/desc class names from the last sorted column's th if it isn't the same as the one that was just clicked */\n            if (dt.lastTh && th != dt.lastTh) {\n                dt.lastTh.classList.remove(\"desc\")\n                dt.lastTh.classList.remove(\"asc\")\n            }\n\n            dt.lastTh = th\n\n            /* Reorder the table */\n            rows = top.concat(btm)\n\n            dt.data = []\n            const indexes = []\n\n            rows.forEach((v, i) => {\n                dt.data.push(v.row)\n\n                if (v.row.searchIndex !== null && v.row.searchIndex !== undefined) {\n                    indexes.push(i)\n                }\n            })\n\n            dt.searchData = indexes\n\n            this.rebuild()\n\n            dt.update()\n\n            if (!init) {\n                dt.emit(\"datatable.sort\", column, dir)\n            }\n        })\n    }\n\n    /**\n     * Rebuild the columns\n     * @return {Void}\n     */\n    rebuild() {\n        let a\n        let b\n        let c\n        let d\n        const dt = this.dt\n        const temp = []\n\n        dt.activeRows = []\n        dt.activeHeadings = []\n\n        dt.headings.forEach((th, i) => {\n            th.originalCellIndex = i\n            th.sortable = th.getAttribute(\"data-sortable\") !== \"false\"\n            if (!dt.hiddenColumns.includes(i)) {\n                dt.activeHeadings.push(th)\n            }\n        })\n\n        // Loop over the rows and reorder the cells\n        dt.data.forEach((row, i) => {\n            a = row.cloneNode(false)\n            b = row.cloneNode(false)\n\n            a.dataIndex = b.dataIndex = i\n\n            if (row.searchIndex !== null && row.searchIndex !== undefined) {\n                a.searchIndex = b.searchIndex = row.searchIndex\n            }\n\n            // Append the cell to the fragment in the correct order\n            Array.from(row.cells).forEach(cell => {\n                c = cell.cloneNode(true)\n                c.data = cell.data\n                a.appendChild(c)\n\n                if (!dt.hiddenColumns.includes(c.cellIndex)) {\n                    d = c.cloneNode(true)\n                    d.data = c.data\n                    b.appendChild(d)\n                }\n            })\n\n            // Append the fragment with the ordered cells\n            temp.push(a)\n            dt.activeRows.push(b)\n        })\n\n        dt.data = temp\n\n        dt.update()\n    }\n}\n","import {createElement} from \"./helpers\"\n\n/**\n * Parse data to HTML table\n */\nexport const dataToTable = function (data) {\n    let thead = false\n    let tbody = false\n\n    data = data || this.options.data\n\n    if (data.headings) {\n        thead = createElement(\"thead\")\n        const tr = createElement(\"tr\")\n        data.headings.forEach(col => {\n            const td = createElement(\"th\", {\n                html: col\n            })\n            tr.appendChild(td)\n        })\n\n        thead.appendChild(tr)\n    }\n\n    if (data.data && data.data.length) {\n        tbody = createElement(\"tbody\")\n        data.data.forEach(rows => {\n            if (data.headings) {\n                if (data.headings.length !== rows.length) {\n                    throw new Error(\n                        \"The number of rows do not match the number of headings.\"\n                    )\n                }\n            }\n            const tr = createElement(\"tr\")\n            rows.forEach(value => {\n                const td = createElement(\"td\", {\n                    html: value\n                })\n                tr.appendChild(td)\n            })\n            tbody.appendChild(tr)\n        })\n    }\n\n    if (thead) {\n        if (this.dom.tHead !== null) {\n            this.dom.removeChild(this.dom.tHead)\n        }\n        this.dom.appendChild(thead)\n    }\n\n    if (tbody) {\n        if (this.dom.tBodies.length) {\n            this.dom.removeChild(this.dom.tBodies[0])\n        }\n        this.dom.appendChild(tbody)\n    }\n}\n","/**\n * Default configuration\n * @typ {Object}\n */\nexport const defaultConfig = {\n    sortable: true,\n    searchable: true,\n\n    // Pagination\n    paging: true,\n    perPage: 10,\n    perPageSelect: [5, 10, 15, 20, 25],\n    nextPrev: true,\n    firstLast: false,\n    prevText: \"&lsaquo;\",\n    nextText: \"&rsaquo;\",\n    firstText: \"&laquo;\",\n    lastText: \"&raquo;\",\n    ellipsisText: \"&hellip;\",\n    ascText: \"▴\",\n    descText: \"▾\",\n    truncatePager: true,\n    pagerDelta: 2,\n\n    scrollY: \"\",\n\n    fixedColumns: true,\n    fixedHeight: false,\n\n    header: true,\n    hiddenHeader: false,\n    footer: false,\n\n    // Customise the display text\n    labels: {\n        placeholder: \"Search...\", // The search input placeholder\n        perPage: \"{select} entries per page\", // per-page dropdown label\n        noRows: \"No entries found\", // Message shown when there are no records to show\n        noResults: \"No results match your search query\", // Message shown when there are no search results\n        info: \"Showing {start} to {end} of {rows} entries\" //\n    },\n\n    // Customise the layout\n    layout: {\n        top: \"{select}{search}\",\n        bottom: \"{info}{pager}\"\n    }\n}\n","import {Rows} from \"./rows\"\nimport {Columns} from \"./columns\"\nimport {dataToTable} from \"./table\"\nimport {defaultConfig} from \"./config\"\nimport {\n    isObject,\n    isJson,\n    createElement,\n    flush,\n    button,\n    truncate\n} from \"./helpers\"\n\n\nexport class DataTable {\n    constructor(table, options = {}) {\n\n        const dom = typeof table === \"string\" ? document.querySelector(table) : table\n\n        // user options\n        this.options = {\n            ...defaultConfig,\n            ...options,\n            layout: {\n                ...defaultConfig.layout,\n                ...options.layout\n            },\n            labels: {\n                ...defaultConfig.labels,\n                ...options.labels\n            }\n        }\n\n        this.initialized = false\n\n        this.initialLayout = dom.innerHTML\n        this.initialSortable = this.options.sortable\n\n        // Disable manual sorting if no header is present (#4)\n        if (!this.options.header) {\n            this.options.sortable = false\n        }\n\n        if (dom.tHead === null) {\n            if (!this.options.data ||\n                (this.options.data && !this.options.data.headings)\n            ) {\n                this.options.sortable = false\n            }\n        }\n\n        if (dom.tBodies.length && !dom.tBodies[0].rows.length) {\n            if (this.options.data) {\n                if (!this.options.data.data) {\n                    throw new Error(\n                        \"You seem to be using the data option, but you've not defined any rows.\"\n                    )\n                }\n            }\n        }\n\n        this.dom = dom\n\n        this.table = this.dom // For compatibility. Remove in version 4\n\n        this.listeners = {\n            onResize: event => this.onResize(event)\n        }\n\n        this.init()\n    }\n\n    /**\n     * Add custom property or method to extend DataTable\n     * @param  {String} prop    - Method name or property\n     * @param  {Mixed} val      - Function or property value\n     * @return {Void}\n     */\n    static extend(prop, val) {\n        if (typeof val === \"function\") {\n            DataTable.prototype[prop] = val\n        } else {\n            DataTable[prop] = val\n        }\n    }\n\n    /**\n     * Initialize the instance\n     * @param  {Object} options\n     * @return {Void}\n     */\n    init(options) {\n        if (this.initialized || this.dom.classList.contains(\"dataTable-table\")) {\n            return false\n        }\n\n        Object.assign(this.options, options || {})\n\n        this.currentPage = 1\n        this.onFirstPage = true\n\n        this.hiddenColumns = []\n        this.columnRenderers = []\n        this.selectedColumns = []\n\n        this.render()\n\n        setTimeout(() => {\n            this.emit(\"datatable.init\")\n            this.initialized = true\n\n            if (this.options.plugins) {\n                Object.entries(this.options.plugins).forEach(([plugin, options]) => {\n                    if (this[plugin] && typeof this[plugin] === \"function\") {\n                        this[plugin] = this[plugin](options, {createElement})\n\n                        // Init plugin\n                        if (options.enabled && this[plugin].init && typeof this[plugin].init === \"function\") {\n                            this[plugin].init()\n                        }\n                    }\n                })\n            }\n        }, 10)\n    }\n\n    /**\n     * Render the instance\n     * @param  {String} type\n     * @return {Void}\n     */\n    render(type) {\n        if (type) {\n            switch (type) {\n            case \"page\":\n                this.renderPage()\n                break\n            case \"pager\":\n                this.renderPager()\n                break\n            case \"header\":\n                this.renderHeader()\n                break\n            }\n\n            return false\n        }\n\n        const options = this.options\n        let template = \"\"\n\n        // Convert data to HTML\n        if (options.data) {\n            dataToTable.call(this)\n        }\n\n        // Store references\n        this.body = this.dom.tBodies[0]\n        this.head = this.dom.tHead\n        this.foot = this.dom.tFoot\n\n        if (!this.body) {\n            this.body = createElement(\"tbody\")\n\n            this.dom.appendChild(this.body)\n        }\n\n        this.hasRows = this.body.rows.length > 0\n\n        // Make a tHead if there isn't one (fixes #8)\n        if (!this.head) {\n            const h = createElement(\"thead\")\n            const t = createElement(\"tr\")\n\n            if (this.hasRows) {\n                Array.from(this.body.rows[0].cells).forEach(() => {\n                    t.appendChild(createElement(\"th\"))\n                })\n\n                h.appendChild(t)\n            }\n\n            this.head = h\n\n            this.dom.insertBefore(this.head, this.body)\n\n            this.hiddenHeader = options.hiddenHeader\n        }\n\n        this.headings = []\n        this.hasHeadings = this.head.rows.length > 0\n\n        if (this.hasHeadings) {\n            this.header = this.head.rows[0]\n            this.headings = [].slice.call(this.header.cells)\n        }\n\n        // Header\n        if (!options.header) {\n            if (this.head) {\n                this.dom.removeChild(this.dom.tHead)\n            }\n        }\n\n        // Footer\n        if (options.footer) {\n            if (this.head && !this.foot) {\n                this.foot = createElement(\"tfoot\", {\n                    html: this.head.innerHTML\n                })\n                this.dom.appendChild(this.foot)\n            }\n        } else {\n            if (this.foot) {\n                this.dom.removeChild(this.dom.tFoot)\n            }\n        }\n\n        // Build\n        this.wrapper = createElement(\"div\", {\n            class: \"dataTable-wrapper dataTable-loading\"\n        })\n\n        // Template for custom layouts\n        template += \"<div class='dataTable-top'>\"\n        template += options.layout.top\n        template += \"</div>\"\n        if (options.scrollY.length) {\n            template += `<div class='dataTable-container' style='height: ${options.scrollY}; overflow-Y: auto;'></div>`\n        } else {\n            template += \"<div class='dataTable-container'></div>\"\n        }\n        template += \"<div class='dataTable-bottom'>\"\n        template += options.layout.bottom\n        template += \"</div>\"\n\n        // Info placement\n        template = template.replace(\"{info}\", options.paging ? \"<div class='dataTable-info'></div>\" : \"\")\n\n        // Per Page Select\n        if (options.paging && options.perPageSelect) {\n            let wrap = \"<div class='dataTable-dropdown'><label>\"\n            wrap += options.labels.perPage\n            wrap += \"</label></div>\"\n\n            // Create the select\n            const select = createElement(\"select\", {\n                class: \"dataTable-selector\"\n            })\n\n            // Create the options\n            options.perPageSelect.forEach(val => {\n                const selected = val === options.perPage\n                const option = new Option(val, val, selected, selected)\n                select.add(option)\n            })\n\n            // Custom label\n            wrap = wrap.replace(\"{select}\", select.outerHTML)\n\n            // Selector placement\n            template = template.replace(\"{select}\", wrap)\n        } else {\n            template = template.replace(\"{select}\", \"\")\n        }\n\n        // Searchable\n        if (options.searchable) {\n            const form =\n                `<div class='dataTable-search'><input class='dataTable-input' placeholder='${options.labels.placeholder}' type='text'></div>`\n\n            // Search input placement\n            template = template.replace(\"{search}\", form)\n        } else {\n            template = template.replace(\"{search}\", \"\")\n        }\n\n        if (this.hasHeadings) {\n            // Sortable\n            this.render(\"header\")\n        }\n\n        // Add table class\n        this.dom.classList.add(\"dataTable-table\")\n\n        // Paginator\n        const paginatorWrapper = createElement(\"nav\", {\n            class: \"dataTable-pagination\"\n        })\n        const paginator = createElement(\"ul\", {\n            class: \"dataTable-pagination-list\"\n        })\n        paginatorWrapper.appendChild(paginator)\n\n        // Pager(s) placement\n        template = template.replace(/\\{pager\\}/g, paginatorWrapper.outerHTML)\n        this.wrapper.innerHTML = template\n\n        this.container = this.wrapper.querySelector(\".dataTable-container\")\n\n        this.pagers = this.wrapper.querySelectorAll(\".dataTable-pagination-list\")\n\n        this.label = this.wrapper.querySelector(\".dataTable-info\")\n\n        // Insert in to DOM tree\n        this.dom.parentNode.replaceChild(this.wrapper, this.dom)\n        this.container.appendChild(this.dom)\n\n        // Store the table dimensions\n        this.rect = this.dom.getBoundingClientRect()\n\n        // Convert rows to array for processing\n        this.data = Array.from(this.body.rows)\n        this.activeRows = this.data.slice()\n        this.activeHeadings = this.headings.slice()\n\n        // Update\n        this.update()\n\n\n        this.setColumns()\n\n\n        // Fix height\n        this.fixHeight()\n\n        // Fix columns\n        this.fixColumns()\n\n        // Class names\n        if (!options.header) {\n            this.wrapper.classList.add(\"no-header\")\n        }\n\n        if (!options.footer) {\n            this.wrapper.classList.add(\"no-footer\")\n        }\n\n        if (options.sortable) {\n            this.wrapper.classList.add(\"sortable\")\n        }\n\n        if (options.searchable) {\n            this.wrapper.classList.add(\"searchable\")\n        }\n\n        if (options.fixedHeight) {\n            this.wrapper.classList.add(\"fixed-height\")\n        }\n\n        if (options.fixedColumns) {\n            this.wrapper.classList.add(\"fixed-columns\")\n        }\n\n        this.bindEvents()\n    }\n\n    /**\n     * Render the page\n     * @return {Void}\n     */\n    renderPage() {\n        if (this.hasHeadings) {\n            flush(this.header)\n\n            this.activeHeadings.forEach(th => this.header.appendChild(th))\n        }\n\n\n        if (this.hasRows && this.totalPages) {\n            if (this.currentPage > this.totalPages) {\n                this.currentPage = 1\n            }\n\n            // Use a fragment to limit touching the DOM\n            const index = this.currentPage - 1\n\n            const frag = document.createDocumentFragment()\n            this.pages[index].forEach(row => frag.appendChild(this.rows().render(row)))\n\n            this.clear(frag)\n\n            this.onFirstPage = this.currentPage === 1\n            this.onLastPage = this.currentPage === this.lastPage\n        } else {\n            this.setMessage(this.options.labels.noRows)\n        }\n\n        // Update the info\n        let current = 0\n\n        let f = 0\n        let t = 0\n        let items\n\n        if (this.totalPages) {\n            current = this.currentPage - 1\n            f = current * this.options.perPage\n            t = f + this.pages[current].length\n            f = f + 1\n            items = this.searching ? this.searchData.length : this.data.length\n        }\n\n        if (this.label && this.options.labels.info.length) {\n            // CUSTOM LABELS\n            const string = this.options.labels.info\n                .replace(\"{start}\", f)\n                .replace(\"{end}\", t)\n                .replace(\"{page}\", this.currentPage)\n                .replace(\"{pages}\", this.totalPages)\n                .replace(\"{rows}\", items)\n\n            this.label.innerHTML = items ? string : \"\"\n        }\n\n        if (this.currentPage == 1) {\n            this.fixHeight()\n        }\n    }\n\n    /**\n     * Render the pager(s)\n     * @return {Void}\n     */\n    renderPager() {\n        flush(this.pagers)\n\n        if (this.totalPages > 1) {\n            const c = \"pager\"\n            const frag = document.createDocumentFragment()\n            const prev = this.onFirstPage ? 1 : this.currentPage - 1\n            const next = this.onLastPage ? this.totalPages : this.currentPage + 1\n\n            // first button\n            if (this.options.firstLast) {\n                frag.appendChild(button(c, 1, this.options.firstText))\n            }\n\n            // prev button\n            if (this.options.nextPrev && !this.onFirstPage) {\n                frag.appendChild(button(c, prev, this.options.prevText))\n            }\n\n            let pager = this.links\n\n            // truncate the links\n            if (this.options.truncatePager) {\n                pager = truncate(\n                    this.links,\n                    this.currentPage,\n                    this.pages.length,\n                    this.options.pagerDelta,\n                    this.options.ellipsisText\n                )\n            }\n\n            // active page link\n            this.links[this.currentPage - 1].classList.add(\"active\")\n\n            // append the links\n            pager.forEach(p => {\n                p.classList.remove(\"active\")\n                frag.appendChild(p)\n            })\n\n            this.links[this.currentPage - 1].classList.add(\"active\")\n\n            // next button\n            if (this.options.nextPrev && !this.onLastPage) {\n                frag.appendChild(button(c, next, this.options.nextText))\n            }\n\n            // first button\n            if (this.options.firstLast) {\n                frag.appendChild(button(c, this.totalPages, this.options.lastText))\n            }\n\n            // We may have more than one pager\n            this.pagers.forEach(pager => {\n                pager.appendChild(frag.cloneNode(true))\n            })\n        }\n    }\n\n    /**\n     * Render the header\n     * @return {Void}\n     */\n    renderHeader() {\n        this.labels = []\n\n        if (this.headings && this.headings.length) {\n            this.headings.forEach((th, i) => {\n\n                this.labels[i] = th.textContent\n\n                if (th.firstElementChild && th.firstElementChild.classList.contains(\"dataTable-sorter\")) {\n                    th.innerHTML = th.firstElementChild.innerHTML\n                }\n\n                th.sortable = th.getAttribute(\"data-sortable\") !== \"false\"\n\n                th.originalCellIndex = i\n                if (this.options.sortable && th.sortable) {\n                    const link = createElement(\"a\", {\n                        href: \"#\",\n                        class: \"dataTable-sorter\",\n                        html: th.innerHTML\n                    })\n\n                    th.innerHTML = \"\"\n                    th.setAttribute(\"data-sortable\", \"\")\n                    th.appendChild(link)\n                }\n            })\n        }\n\n        this.fixColumns()\n    }\n\n    /**\n     * Bind event listeners\n     * @return {[type]} [description]\n     */\n    bindEvents() {\n        const options = this.options\n        // Per page selector\n        if (options.perPageSelect) {\n            const selector = this.wrapper.querySelector(\".dataTable-selector\")\n            if (selector) {\n                // Change per page\n                selector.addEventListener(\"change\", () => {\n                    options.perPage = parseInt(selector.value, 10)\n                    this.update()\n\n                    this.fixHeight()\n\n                    this.emit(\"datatable.perpage\", options.perPage)\n                }, false)\n            }\n        }\n\n        // Search input\n        if (options.searchable) {\n            this.input = this.wrapper.querySelector(\".dataTable-input\")\n            if (this.input) {\n                this.input.addEventListener(\"keyup\", () => this.search(this.input.value), false)\n            }\n        }\n\n        // Pager(s) / sorting\n        this.wrapper.addEventListener(\"click\", e => {\n            const t = e.target.closest(\"a\")\n            if (t && (t.nodeName.toLowerCase() === \"a\")) {\n                if (t.hasAttribute(\"data-page\")) {\n                    this.page(t.getAttribute(\"data-page\"))\n                    e.preventDefault()\n                } else if (\n                    options.sortable &&\n                    t.classList.contains(\"dataTable-sorter\") &&\n                    t.parentNode.getAttribute(\"data-sortable\") != \"false\"\n                ) {\n                    this.columns().sort(this.headings.indexOf(t.parentNode))\n                    e.preventDefault()\n                }\n            }\n        }, false)\n\n        window.addEventListener(\"resize\", this.listeners.onResize)\n    }\n\n    /**\n     * execute on resize\n     */\n    onResize() {\n        this.rect = this.container.getBoundingClientRect()\n        if (!this.rect.width) {\n            // No longer shown, likely no longer part of DOM. Give up.\n            return\n        }\n        this.fixColumns()\n    }\n\n    /**\n     * Set up columns\n     * @return {[type]} [description]\n     */\n    setColumns(ajax) {\n\n        if (!ajax) {\n            this.data.forEach(row => {\n                Array.from(row.cells).forEach(cell => {\n                    cell.data = cell.innerHTML\n                })\n            })\n        }\n\n        // Check for the columns option\n        if (this.options.columns && this.headings.length) {\n\n            this.options.columns.forEach(data => {\n\n                // convert single column selection to array\n                if (!Array.isArray(data.select)) {\n                    data.select = [data.select]\n                }\n\n                if (data.hasOwnProperty(\"render\") && typeof data.render === \"function\") {\n                    this.selectedColumns = this.selectedColumns.concat(data.select)\n\n                    this.columnRenderers.push({\n                        columns: data.select,\n                        renderer: data.render\n                    })\n                }\n\n                // Add the data attributes to the th elements\n                data.select.forEach(column => {\n                    const th = this.headings[column]\n                    if (data.type) {\n                        th.setAttribute(\"data-type\", data.type)\n                    }\n                    if (data.format) {\n                        th.setAttribute(\"data-format\", data.format)\n                    }\n                    if (data.hasOwnProperty(\"sortable\")) {\n                        th.setAttribute(\"data-sortable\", data.sortable)\n                    }\n\n                    if (data.hasOwnProperty(\"hidden\")) {\n                        if (data.hidden !== false) {\n                            this.columns().hide([column])\n                        }\n                    }\n\n                    if (data.hasOwnProperty(\"sort\") && data.select.length === 1) {\n                        this.columns().sort(data.select[0], data.sort, true)\n                    }\n                })\n            })\n        }\n\n        if (this.hasRows) {\n            this.data.forEach((row, i) => {\n                row.dataIndex = i\n                Array.from(row.cells).forEach(cell => {\n                    cell.data = cell.innerHTML\n                })\n            })\n\n            if (this.selectedColumns.length) {\n                this.data.forEach(row => {\n                    Array.from(row.cells).forEach((cell, i) => {\n                        if (this.selectedColumns.includes(i)) {\n                            this.columnRenderers.forEach(options => {\n                                if (options.columns.includes(i)) {\n                                    cell.innerHTML = options.renderer.call(this, cell.data, cell, row)\n                                }\n                            })\n                        }\n                    })\n                })\n            }\n\n            this.columns().rebuild()\n        }\n\n        this.render(\"header\")\n    }\n\n    /**\n     * Destroy the instance\n     * @return {void}\n     */\n    destroy() {\n        this.dom.innerHTML = this.initialLayout\n\n        // Remove the className\n        this.dom.classList.remove(\"dataTable-table\")\n\n        // Remove the containers\n        this.wrapper.parentNode.replaceChild(this.dom, this.wrapper)\n\n        this.initialized = false\n\n        window.removeEventListener(\"resize\", this.listeners.onResize)\n    }\n\n    /**\n     * Update the instance\n     * @return {Void}\n     */\n    update() {\n        this.wrapper.classList.remove(\"dataTable-empty\")\n\n        this.paginate(this)\n        this.render(\"page\")\n\n        this.links = []\n\n        let i = this.pages.length\n        while (i--) {\n            const num = i + 1\n            this.links[i] = button(i === 0 ? \"active\" : \"\", num, num)\n        }\n\n        this.sorting = false\n\n        this.render(\"pager\")\n\n        this.rows().update()\n\n        this.emit(\"datatable.update\")\n    }\n\n    /**\n     * Sort rows into pages\n     * @return {Number}\n     */\n    paginate() {\n        const perPage = this.options.perPage\n        let rows = this.activeRows\n\n        if (this.searching) {\n            rows = []\n\n            this.searchData.forEach(index => rows.push(this.activeRows[index]))\n        }\n\n        if (this.options.paging) {\n            // Check for hidden columns\n            this.pages = rows\n                .map((tr, i) => i % perPage === 0 ? rows.slice(i, i + perPage) : null)\n                .filter(page => page)\n        } else {\n            this.pages = [rows]\n        }\n\n        this.totalPages = this.lastPage = this.pages.length\n\n        return this.totalPages\n    }\n\n    /**\n     * Fix column widths\n     * @return {Void}\n     */\n    fixColumns() {\n\n        if ((this.options.scrollY.length || this.options.fixedColumns) && this.activeHeadings && this.activeHeadings.length) {\n            let cells\n            let hd = false\n            this.columnWidths = []\n\n            // If we have headings we need only set the widths on them\n            // otherwise we need a temp header and the widths need applying to all cells\n            if (this.dom.tHead) {\n\n                if (this.options.scrollY.length) {\n                    hd = createElement(\"thead\")\n                    hd.appendChild(createElement(\"tr\"))\n                    hd.style.height = \"0px\"\n                    if (this.headerTable) {\n                        // move real header back into place\n                        this.dom.tHead = this.headerTable.tHead\n                    }\n                }\n\n                // Reset widths\n                this.activeHeadings.forEach(cell => {\n                    cell.style.width = \"\"\n                })\n\n                this.activeHeadings.forEach((cell, i) => {\n                    const ow = cell.offsetWidth\n                    const w = ow / this.rect.width * 100\n                    cell.style.width = `${w}%`\n                    this.columnWidths[i] = ow\n                    if (this.options.scrollY.length) {\n                        const th = createElement(\"th\")\n                        hd.firstElementChild.appendChild(th)\n                        th.style.width = `${w}%`\n                        th.style.paddingTop = \"0\"\n                        th.style.paddingBottom = \"0\"\n                        th.style.border = \"0\"\n                    }\n                })\n\n                if (this.options.scrollY.length) {\n                    const container = this.dom.parentElement\n                    if (!this.headerTable) {\n                        this.headerTable = createElement(\"table\", {\n                            class: \"dataTable-table\"\n                        })\n                        const headercontainer = createElement(\"div\", {\n                            class: \"dataTable-headercontainer\"\n                        })\n                        headercontainer.appendChild(this.headerTable)\n                        container.parentElement.insertBefore(headercontainer, container)\n                    }\n                    const thd = this.dom.tHead\n                    this.dom.replaceChild(hd, thd)\n                    this.headerTable.tHead = thd\n\n                    // Compensate for scrollbars.\n                    this.headerTable.parentElement.style.paddingRight = `${\n                        this.headerTable.clientWidth -\n                        this.dom.clientWidth +\n                        parseInt(\n                            this.headerTable.parentElement.style.paddingRight ||\n                            \"0\",\n                            10\n                        )\n                    }px`\n\n                    if (container.scrollHeight > container.clientHeight) {\n                        // scrollbars on one page means scrollbars on all pages.\n                        container.style.overflowY = \"scroll\"\n                    }\n                }\n\n            } else {\n                cells = []\n\n                // Make temperary headings\n                hd = createElement(\"thead\")\n                const r = createElement(\"tr\")\n                Array.from(this.dom.tBodies[0].rows[0].cells).forEach(() => {\n                    const th = createElement(\"th\")\n                    r.appendChild(th)\n                    cells.push(th)\n                })\n\n                hd.appendChild(r)\n                this.dom.insertBefore(hd, this.body)\n\n                const widths = []\n                cells.forEach((cell, i) => {\n                    const ow = cell.offsetWidth\n                    const w = ow / this.rect.width * 100\n                    widths.push(w)\n                    this.columnWidths[i] = ow\n                })\n\n                this.data.forEach(row => {\n                    Array.from(row.cells).forEach((cell, i) => {\n                        if (this.columns(cell.cellIndex).visible())\n                            cell.style.width = `${widths[i]}%`\n                    })\n                })\n\n                // Discard the temp header\n                this.dom.removeChild(hd)\n            }\n        }\n    }\n\n    /**\n     * Fix the container height\n     * @return {Void}\n     */\n    fixHeight() {\n        if (this.options.fixedHeight) {\n            this.container.style.height = null\n            this.rect = this.container.getBoundingClientRect()\n            this.container.style.height = `${this.rect.height}px`\n        }\n    }\n\n    /**\n     * Perform a search of the data set\n     * @param  {string} query\n     * @return {void}\n     */\n    search(query) {\n        if (!this.hasRows) return false\n\n        query = query.toLowerCase()\n\n        this.currentPage = 1\n        this.searching = true\n        this.searchData = []\n\n        if (!query.length) {\n            this.searching = false\n            this.update()\n            this.emit(\"datatable.search\", query, this.searchData)\n            this.wrapper.classList.remove(\"search-results\")\n            return false\n        }\n\n        this.clear()\n\n        this.data.forEach((row, idx) => {\n            const inArray = this.searchData.includes(row)\n\n            // https://github.com/Mobius1/Vanilla-DataTables/issues/12\n            const doesQueryMatch = query.split(\" \").reduce((bool, word) => {\n                let includes = false\n                let cell = null\n                let content = null\n\n                for (let x = 0; x < row.cells.length; x++) {\n                    cell = row.cells[x]\n                    content = cell.hasAttribute(\"data-content\") ? cell.getAttribute(\"data-content\") : cell.textContent\n\n                    if (\n                        content.toLowerCase().includes(word) &&\n                        this.columns(cell.cellIndex).visible()\n                    ) {\n                        includes = true\n                        break\n                    }\n                }\n\n                return bool && includes\n            }, true)\n\n            if (doesQueryMatch && !inArray) {\n                row.searchIndex = idx\n                this.searchData.push(idx)\n            } else {\n                row.searchIndex = null\n            }\n        })\n\n        this.wrapper.classList.add(\"search-results\")\n\n        if (!this.searchData.length) {\n            this.wrapper.classList.remove(\"search-results\")\n\n            this.setMessage(this.options.labels.noResults)\n        } else {\n            this.update()\n        }\n\n        this.emit(\"datatable.search\", query, this.searchData)\n    }\n\n    /**\n     * Change page\n     * @param  {int} page\n     * @return {void}\n     */\n    page(page) {\n        // We don't want to load the current page again.\n        if (page == this.currentPage) {\n            return false\n        }\n\n        if (!isNaN(page)) {\n            this.currentPage = parseInt(page, 10)\n        }\n\n        if (page > this.pages.length || page < 0) {\n            return false\n        }\n\n        this.render(\"page\")\n        this.render(\"pager\")\n\n        this.emit(\"datatable.page\", page)\n    }\n\n    /**\n     * Sort by column\n     * @param  {int} column - The column no.\n     * @param  {string} direction - asc or desc\n     * @return {void}\n     */\n    sortColumn(column, direction) {\n        // Use columns API until sortColumn method is removed\n        this.columns().sort(column, direction)\n    }\n\n    /**\n     * Add new row data\n     * @param {object} data\n     */\n    insert(data) {\n        let rows = []\n        if (isObject(data)) {\n            if (data.headings) {\n                if (!this.hasHeadings && !this.hasRows) {\n                    const tr = createElement(\"tr\")\n                    data.headings.forEach(heading => {\n                        const th = createElement(\"th\", {\n                            html: heading\n                        })\n\n                        tr.appendChild(th)\n                    })\n                    this.head.appendChild(tr)\n\n                    this.header = tr\n                    this.headings = [].slice.call(tr.cells)\n                    this.hasHeadings = true\n\n                    // Re-enable sorting if it was disabled due\n                    // to missing header\n                    this.options.sortable = this.initialSortable\n\n                    // Allow sorting on new header\n                    this.render(\"header\")\n\n                    // Activate newly added headings\n                    this.activeHeadings = this.headings.slice()\n                }\n            }\n\n            if (data.data && Array.isArray(data.data)) {\n                rows = data.data\n            }\n        } else if (Array.isArray(data)) {\n            data.forEach(row => {\n                const r = []\n                Object.entries(row).forEach(([heading, cell]) => {\n\n                    const index = this.labels.indexOf(heading)\n\n                    if (index > -1) {\n                        r[index] = cell\n                    }\n                })\n                rows.push(r)\n            })\n        }\n\n        if (rows.length) {\n            this.rows().add(rows)\n\n            this.hasRows = true\n        }\n\n        this.update()\n        this.setColumns()\n        this.fixColumns()\n    }\n\n    /**\n     * Refresh the instance\n     * @return {void}\n     */\n    refresh() {\n        if (this.options.searchable) {\n            this.input.value = \"\"\n            this.searching = false\n        }\n        this.currentPage = 1\n        this.onFirstPage = true\n        this.update()\n\n        this.emit(\"datatable.refresh\")\n    }\n\n    /**\n     * Truncate the table\n     * @param  {mixes} html - HTML string or HTMLElement\n     * @return {void}\n     */\n    clear(html) {\n        if (this.body) {\n            flush(this.body)\n        }\n\n        let parent = this.body\n        if (!this.body) {\n            parent = this.dom\n        }\n\n        if (html) {\n            if (typeof html === \"string\") {\n                const frag = document.createDocumentFragment()\n                frag.innerHTML = html\n            }\n\n            parent.appendChild(html)\n        }\n    }\n\n    /**\n     * Export table to various formats (csv, txt or sql)\n     * @param  {Object} userOptions User options\n     * @return {Boolean}\n     */\n    export(userOptions) {\n        if (!this.hasHeadings && !this.hasRows) return false\n\n        const headers = this.activeHeadings\n        let rows = []\n        const arr = []\n        let i\n        let x\n        let str\n        let link\n\n        const defaults = {\n            download: true,\n            skipColumn: [],\n\n            // csv\n            lineDelimiter: \"\\n\",\n            columnDelimiter: \",\",\n\n            // sql\n            tableName: \"myTable\",\n\n            // json\n            replacer: null,\n            space: 4\n        }\n\n        // Check for the options object\n        if (!isObject(userOptions)) {\n            return false\n        }\n\n        const options = {\n            ...defaults,\n            ...userOptions\n        }\n\n        if (options.type) {\n            if (options.type === \"txt\" || options.type === \"csv\") {\n                // Include headings\n                rows[0] = this.header\n            }\n\n            // Selection or whole table\n            if (options.selection) {\n                // Page number\n                if (!isNaN(options.selection)) {\n                    rows = rows.concat(this.pages[options.selection - 1])\n                } else if (Array.isArray(options.selection)) {\n                    // Array of page numbers\n                    for (i = 0; i < options.selection.length; i++) {\n                        rows = rows.concat(this.pages[options.selection[i] - 1])\n                    }\n                }\n            } else {\n                rows = rows.concat(this.activeRows)\n            }\n\n            // Only proceed if we have data\n            if (rows.length) {\n                if (options.type === \"txt\" || options.type === \"csv\") {\n                    str = \"\"\n\n                    for (i = 0; i < rows.length; i++) {\n                        for (x = 0; x < rows[i].cells.length; x++) {\n                            // Check for column skip and visibility\n                            if (\n                                !options.skipColumn.includes(headers[x].originalCellIndex) &&\n                                this.columns(headers[x].originalCellIndex).visible()\n                            ) {\n                                let text = rows[i].cells[x].textContent\n                                text = text.trim()\n                                text = text.replace(/\\s{2,}/g, \" \")\n                                text = text.replace(/\\n/g, \"  \")\n                                text = text.replace(/\"/g, \"\\\"\\\"\")\n                                //have to manually encode \"#\" as encodeURI leaves it as is.\n                                text = text.replace(/#/g, \"%23\")\n                                if (text.includes(\",\"))\n                                    text = `\"${text}\"`\n\n\n                                str += text + options.columnDelimiter\n                            }\n                        }\n                        // Remove trailing column delimiter\n                        str = str.trim().substring(0, str.length - 1)\n\n                        // Apply line delimiter\n                        str += options.lineDelimiter\n                    }\n\n                    // Remove trailing line delimiter\n                    str = str.trim().substring(0, str.length - 1)\n\n                    if (options.download) {\n                        str = `data:text/csv;charset=utf-8,${str}`\n                    }\n                } else if (options.type === \"sql\") {\n                    // Begin INSERT statement\n                    str = `INSERT INTO \\`${options.tableName}\\` (`\n\n                    // Convert table headings to column names\n                    for (i = 0; i < headers.length; i++) {\n                        // Check for column skip and column visibility\n                        if (\n                            !options.skipColumn.includes(headers[i].originalCellIndex) &&\n                            this.columns(headers[i].originalCellIndex).visible()\n                        ) {\n                            str += `\\`${headers[i].textContent}\\`,`\n                        }\n                    }\n\n                    // Remove trailing comma\n                    str = str.trim().substring(0, str.length - 1)\n\n                    // Begin VALUES\n                    str += \") VALUES \"\n\n                    // Iterate rows and convert cell data to column values\n                    for (i = 0; i < rows.length; i++) {\n                        str += \"(\"\n\n                        for (x = 0; x < rows[i].cells.length; x++) {\n                            // Check for column skip and column visibility\n                            if (\n                                !options.skipColumn.includes(headers[x].originalCellIndex) &&\n                                this.columns(headers[x].originalCellIndex).visible()\n                            ) {\n                                str += `\"${rows[i].cells[x].textContent}\",`\n                            }\n                        }\n\n                        // Remove trailing comma\n                        str = str.trim().substring(0, str.length - 1)\n\n                        // end VALUES\n                        str += \"),\"\n                    }\n\n                    // Remove trailing comma\n                    str = str.trim().substring(0, str.length - 1)\n\n                    // Add trailing colon\n                    str += \";\"\n\n                    if (options.download) {\n                        str = `data:application/sql;charset=utf-8,${str}`\n                    }\n                } else if (options.type === \"json\") {\n                    // Iterate rows\n                    for (x = 0; x < rows.length; x++) {\n                        arr[x] = arr[x] || {}\n                        // Iterate columns\n                        for (i = 0; i < headers.length; i++) {\n                            // Check for column skip and column visibility\n                            if (\n                                !options.skipColumn.includes(headers[i].originalCellIndex) &&\n                                this.columns(headers[i].originalCellIndex).visible()\n                            ) {\n                                arr[x][headers[i].textContent] = rows[x].cells[i].textContent\n                            }\n                        }\n                    }\n\n                    // Convert the array of objects to JSON string\n                    str = JSON.stringify(arr, options.replacer, options.space)\n\n                    if (options.download) {\n                        str = `data:application/json;charset=utf-8,${str}`\n                    }\n                }\n\n                // Download\n                if (options.download) {\n                    // Filename\n                    options.filename = options.filename || \"datatable_export\"\n                    options.filename += `.${options.type}`\n\n                    str = encodeURI(str)\n\n                    // Create a link to trigger the download\n                    link = document.createElement(\"a\")\n                    link.href = str\n                    link.download = options.filename\n\n                    // Append the link\n                    document.body.appendChild(link)\n\n                    // Trigger the download\n                    link.click()\n\n                    // Remove the link\n                    document.body.removeChild(link)\n                }\n\n                return str\n            }\n        }\n\n        return false\n    }\n\n    /**\n     * Import data to the table\n     * @param  {Object} userOptions User options\n     * @return {Boolean}\n     */\n    import(userOptions) {\n        let obj = false\n        const defaults = {\n            // csv\n            lineDelimiter: \"\\n\",\n            columnDelimiter: \",\"\n        }\n\n        // Check for the options object\n        if (!isObject(userOptions)) {\n            return false\n        }\n\n        const options = {\n            ...defaults,\n            ...userOptions\n        }\n\n        if (options.data.length || isObject(options.data)) {\n            // Import CSV\n            if (options.type === \"csv\") {\n                obj = {\n                    data: []\n                }\n\n                // Split the string into rows\n                const rows = options.data.split(options.lineDelimiter)\n\n                if (rows.length) {\n\n                    if (options.headings) {\n                        obj.headings = rows[0].split(options.columnDelimiter)\n\n                        rows.shift()\n                    }\n\n                    rows.forEach((row, i) => {\n                        obj.data[i] = []\n\n                        // Split the rows into values\n                        const values = row.split(options.columnDelimiter)\n\n                        if (values.length) {\n                            values.forEach(value => {\n                                obj.data[i].push(value)\n                            })\n                        }\n                    })\n                }\n            } else if (options.type === \"json\") {\n                const json = isJson(options.data)\n\n                // Valid JSON string\n                if (json) {\n                    obj = {\n                        headings: [],\n                        data: []\n                    }\n\n                    json.forEach((data, i) => {\n                        obj.data[i] = []\n                        Object.entries(data).forEach(([column, value]) => {\n                            if (!obj.headings.includes(column)) {\n                                obj.headings.push(column)\n                            }\n\n                            obj.data[i].push(value)\n                        })\n                    })\n                } else {\n                    // console.warn(\"That's not valid JSON!\")\n                }\n            }\n\n            if (isObject(options.data)) {\n                obj = options.data\n            }\n\n            if (obj) {\n                // Add the rows\n                this.insert(obj)\n            }\n        }\n\n        return false\n    }\n\n    /**\n     * Print the table\n     * @return {void}\n     */\n    print() {\n        const headings = this.activeHeadings\n        const rows = this.activeRows\n        const table = createElement(\"table\")\n        const thead = createElement(\"thead\")\n        const tbody = createElement(\"tbody\")\n\n        const tr = createElement(\"tr\")\n        headings.forEach(th => {\n            tr.appendChild(\n                createElement(\"th\", {\n                    html: th.textContent\n                })\n            )\n        })\n\n        thead.appendChild(tr)\n\n        rows.forEach(row => {\n            const tr = createElement(\"tr\")\n            Array.from(row.cells).forEach(cell => {\n                tr.appendChild(\n                    createElement(\"td\", {\n                        html: cell.textContent\n                    })\n                )\n            })\n            tbody.appendChild(tr)\n        })\n\n        table.appendChild(thead)\n        table.appendChild(tbody)\n\n        // Open new window\n        const w = window.open()\n\n        // Append the table to the body\n        w.document.body.appendChild(table)\n\n        // Print\n        w.print()\n    }\n\n    /**\n     * Show a message in the table\n     * @param {string} message\n     */\n    setMessage(message) {\n        let colspan = 1\n\n        if (this.hasRows) {\n            colspan = this.data[0].cells.length\n        } else if (this.activeHeadings.length) {\n            colspan = this.activeHeadings.length\n        }\n\n        this.wrapper.classList.add(\"dataTable-empty\")\n\n        if (this.label) {\n            this.label.innerHTML = \"\"\n        }\n        this.totalPages = 0\n        this.render(\"pager\")\n\n        this.clear(\n            createElement(\"tr\", {\n                html: `<td class=\"dataTables-empty\" colspan=\"${colspan}\">${message}</td>`\n            })\n        )\n    }\n\n    /**\n     * Columns API access\n     * @return {Object} new Columns instance\n     */\n    columns(columns) {\n        return new Columns(this, columns)\n    }\n\n    /**\n     * Rows API access\n     * @return {Object} new Rows instance\n     */\n    rows(rows) {\n        return new Rows(this, rows)\n    }\n\n    /**\n     * Add custom event listener\n     * @param  {String} event\n     * @param  {Function} callback\n     * @return {Void}\n     */\n    on(event, callback) {\n        this.events = this.events || {}\n        this.events[event] = this.events[event] || []\n        this.events[event].push(callback)\n    }\n\n    /**\n     * Remove custom event listener\n     * @param  {String} event\n     * @param  {Function} callback\n     * @return {Void}\n     */\n    off(event, callback) {\n        this.events = this.events || {}\n        if (event in this.events === false) return\n        this.events[event].splice(this.events[event].indexOf(callback), 1)\n    }\n\n    /**\n     * Fire custom event\n     * @param  {String} event\n     * @return {Void}\n     */\n    emit(event) {\n        this.events = this.events || {}\n        if (event in this.events === false) return\n        for (let i = 0; i < this.events[event].length; i++) {\n            this.events[event][i].apply(this, Array.prototype.slice.call(arguments, 1))\n        }\n    }\n}\n"],"names":["isObject","val","Object","prototype","toString","call","createElement","nodeName","attrs","dom","document","attr","innerHTML","setAttribute","flush","el","NodeList","forEach","e","button","className","page","text","class","html","sortItems","a","b","func","c","d","compare","x","y","length","f","value","g","h","i","Rows","constructor","dt","rows","this","build","row","tr","headings","map","td","data","appendChild","render","add","Array","isArray","push","hasRows","update","columns","rebuild","remove","select","sort","splice","dataIndex","findRowIndex","columnIndex","findIndex","children","innerText","toLowerCase","includes","String","findRow","index","cols","cells","r","updateRow","Columns","swap","order","s","cell","temp","column","getAttribute","cloneNode","originalCellIndex","sortable","hiddenColumns","searchIndex","undefined","activeHeadings","activeRows","hide","show","indexOf","visible","th","isNaN","insert","heading","hiddenHeader","type","format","hasOwnProperty","renderHeader","removeChild","filter","dir","init","terms","filterState","originalData","filters","rowFilter","filteredRows","from","content","hasAttribute","clear","setMessage","options","labels","noRows","emit","hasHeadings","filterTerms","textContent","sorting","alpha","numeric","n","waitFor","import","then","parseDate","date","Promise","all","importedFunctions","parseFunction","num","replace","parseFloat","Number","trim","sortType","dataset","sortFunction","top","btm","classList","contains","lastTh","concat","indexes","v","searchData","cellIndex","dataToTable","thead","tbody","col","Error","tHead","tBodies","defaultConfig","searchable","paging","perPage","perPageSelect","nextPrev","firstLast","prevText","nextText","firstText","lastText","ellipsisText","ascText","descText","truncatePager","pagerDelta","scrollY","fixedColumns","fixedHeight","header","footer","placeholder","noResults","info","layout","bottom","DataTable","table","querySelector","initialized","initialLayout","initialSortable","listeners","onResize","event","static","prop","assign","currentPage","onFirstPage","columnRenderers","selectedColumns","setTimeout","plugins","entries","plugin","enabled","renderPage","renderPager","template","body","head","foot","tFoot","t","insertBefore","slice","wrapper","wrap","selected","option","Option","outerHTML","form","paginatorWrapper","paginator","container","pagers","querySelectorAll","label","parentNode","replaceChild","rect","getBoundingClientRect","setColumns","fixHeight","fixColumns","bindEvents","totalPages","frag","createDocumentFragment","pages","onLastPage","lastPage","items","current","searching","string","prev","next","pager","links","ellipsis","j","k","l","truncate","p","firstElementChild","link","href","selector","addEventListener","parseInt","input","search","target","closest","preventDefault","window","width","ajax","renderer","hidden","destroy","removeEventListener","paginate","hd","columnWidths","style","height","headerTable","ow","offsetWidth","w","paddingTop","paddingBottom","border","parentElement","headercontainer","thd","paddingRight","clientWidth","scrollHeight","clientHeight","overflowY","widths","query","idx","inArray","split","reduce","bool","word","sortColumn","direction","refresh","parent","export","userOptions","headers","arr","str","download","skipColumn","lineDelimiter","columnDelimiter","tableName","replacer","space","selection","substring","JSON","stringify","filename","encodeURI","click","obj","shift","values","json","parse","isJson","print","open","message","colspan","on","callback","events","off","apply","arguments"],"mappings":"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"}